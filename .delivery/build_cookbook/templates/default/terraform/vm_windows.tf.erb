resource "azurerm_network_interface" "win_delivery" {
  name                = "${var.win_vm_name}-${format("%02d", count.index+1)}-nic"
  location            = "${azurerm_resource_group.delivery.location}"
  resource_group_name = "${azurerm_resource_group.delivery.name}"
  count               = "${var.count_vms}"

  ip_configuration {
    name                          = "${var.win_vm_name}-${format("%02d", count.index+1)}-ipconf"
    subnet_id                     = "${var.subnet_id}"
    private_ip_address_allocation = "dynamic"
  }
}

resource "azurerm_storage_account" "win_delivery" {
  name                     = "${replace(var.win_vm_name, "-", "")}${substr(lower(replace(replace(var.cookbook_name, "_", ""), "-", "")), -10, -1)}${format("%02d", count.index+1)}s"
  resource_group_name      = "${azurerm_resource_group.delivery.name}"
  location                 = "${azurerm_resource_group.delivery.location}"
  account_tier             = "Standard"
  account_replication_type = "LRS"
  count                    = "${var.count_vms}"
}

resource "azurerm_storage_container" "win_delivery" {
  name                  = "vhds"
  resource_group_name   = "${azurerm_resource_group.delivery.name}"
  storage_account_name  = "${element(azurerm_storage_account.win_delivery.*.name, count.index)}"
  container_access_type = "private"
  count                 = "${var.count_vms}"
}

resource "azurerm_virtual_machine" "win_delivery" {
  name                  = "${var.win_vm_name}-${format("%02d", count.index+1)}"
  location              = "${azurerm_resource_group.delivery.location}"
  resource_group_name   = "${azurerm_resource_group.delivery.name}"
  network_interface_ids = ["${element(azurerm_network_interface.win_delivery.*.id, count.index)}"]
  vm_size               = "${var.win_vm_size}"
  count                 = "${var.count_vms}"

  delete_os_disk_on_termination    = true
  delete_data_disks_on_termination = true

  storage_image_reference {
    publisher = "${var.win_image_publisher}"
    offer     = "${var.win_image_offer}"
    sku       = "${var.win_image_sku}"
    version   = "${var.win_image_version}"
  }

  storage_os_disk {
    name          = "osdisk"
    vhd_uri       = "${element(azurerm_storage_account.win_delivery.*.primary_blob_endpoint, count.index)}${element(azurerm_storage_container.win_delivery.*.name, count.index)}/osdisk.vhd"
    caching       = "ReadWrite"
    create_option = "FromImage"
  }

  os_profile {
    computer_name  = "${var.win_vm_name}-${format("%02d", count.index+1)}"
    admin_username = "${var.admin_user}"
    admin_password = "${var.admin_password}"
  }

  os_profile_windows_config {
    provision_vm_agent = "true"
  }

  provisioner "local-exec" {
    when    = "destroy"
    command = "knife node bulk delete \"${var.win_vm_name}-${format("%02d", count.index+1)}-${var.cookbook_name}\" -y; knife client bulk delete \"${var.win_vm_name}-${format("%02d", count.index+1)}-${var.cookbook_name}\" -y;"
  }

  provisioner "remote-exec" {
    when    = "destroy"
    inline = [
      "/bin/bash -c \"while read -r line ; do echo \\\"Deleting node \\$line\\\"; sudo automate-ctl delete-node -u \\$line -f; done < <(sudo automate-ctl node-summary | awk '/${var.win_vm_name}-${format("%02d", count.index+1)}-${var.cookbook_name}/ {print \\$2}');\""
    ]

    connection {
      type             = "ssh"
      host             = "10.16.192.8"
      user             = "${var.admin_user}"
      password         = "${var.admin_password}"
      agent            = false
    }
  }

  tags {
    environment = "Chef Automate"
  }
}

resource "azurerm_virtual_machine_extension" "win_delivery" {
  name                 = "windeliveryremotescript"
  location             = "${azurerm_resource_group.delivery.location}"
  resource_group_name  = "${azurerm_resource_group.delivery.name}"
  virtual_machine_name = "${azurerm_virtual_machine.win_delivery.name}"
  publisher            = "Microsoft.Compute"
  type                 = "CustomScriptExtension"
  type_handler_version = "1.9"

  settings = <<SETTINGS
    {
        "commandToExecute": "powershell.exe -executionpolicy Unrestricted -command \"Write-Host 'Configuring WinRM'; winrm set winrm/config/winrs '@{MaxMemoryPerShellMB=`\"300`\"}'; winrm set winrm/config '@{MaxTimeoutms=`\"1800000`\"}'; winrm set winrm/config/service '@{AllowUnencrypted=`\"true`\"}'; winrm set winrm/config/service/auth '@{Basic=`\"true`\"}'; Write-Host 'Open Firewall Ports'; netsh advfirewall firewall add rule name='Windows Remote Management (HTTP-In)' dir=in action=allow protocol=TCP localport=5985; netsh advfirewall firewall add rule name='Windows Remote Management (HTTPS-In)' dir=in action=allow protocol=TCP localport=5986; netsh advfirewall firewall add rule name='RDP In' protocol=TCP dir=in localport=3389 action=allow; Write-Host 'Adding hosts file entries'; '10.16.192.7 azl-chef-srvr-01' | Add-Content -PassThru $env:windir\\System32\\drivers\\etc\\hosts; '10.16.192.8 azl-chef-auto-01' | Add-Content -PassThru $env:windir\\System32\\drivers\\etc\\hosts;\""
    }
SETTINGS

  tags {
    environment = "Production"
  }
}

resource "null_resource" "win_delivery" {
  count     = "${var.count_vms}"
  depends_on = ["azurerm_virtual_machine_extension.win_delivery"]

  triggers{
    win_delivery_vms = "${join(",", azurerm_virtual_machine.win_delivery.*.id)}"
  }

  provisioner "local-exec" {
    command = "knife bootstrap windows winrm ${element(azurerm_network_interface.win_delivery.*.private_ip_address, count.index)} -N ${var.win_vm_name}-${format("%02d", count.index+1)}-${var.cookbook_name} --environment acceptance-trek-trek-bikes-${var.cookbook_name}-master -x ${var.admin_user} -P ${var.admin_password} --run-list '${var.base_run_list}recipe[${var.cookbook_name}]' --yes"
  }
}
